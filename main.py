import logging
import json
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = '7756712835:AAFGks726IMI7OCMLrCrXSmsaQ2Q3t_y-Sw'
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

USERS_FILE = "users.json"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def load_users():
    try:
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)

registered_users = load_users()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üó∫ –ö–∞—Ä—Ç–∞", "üé§ –ê—Ä—Ç–∏—Å—Ç—ã")
main_menu.add("üèï –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚úâ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
main_menu.add("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule_menu = InlineKeyboardMarkup()
schedule_menu.add(InlineKeyboardButton("–ö–æ–Ω—Ü–µ—Ä—Ç—ã", callback_data='filter_concerts'))
schedule_menu.add(InlineKeyboardButton("–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã", callback_data='filter_workshops'))
schedule_menu.add(InlineKeyboardButton("–õ–µ–∫—Ü–∏–∏", callback_data='filter_lectures'))
schedule_menu.add(InlineKeyboardButton("–í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data='filter_all'))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—è üéâ\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text == "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def register_user(message: types.Message):
    user_id = message.from_user.id
    if user_id not in registered_users:
        registered_users.append(user_id)
        save_users(registered_users)
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
    else:
        await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
async def unregister_user(message: types.Message):
    user_id = message.from_user.id
    if user_id in registered_users:
        registered_users.remove(user_id)
        save_users(registered_users)
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    else:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

@dp.message_handler(lambda message: message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π:", reply_markup=schedule_menu)

@dp.callback_query_handler(lambda call: call.data.startswith('filter_'))
async def filter_schedule(call: types.CallbackQuery):
    filter_type = call.data.split('_')[1]
    events = {
        "concerts": "üéµ –ö–æ–Ω—Ü–µ—Ä—Ç—ã: https://mintmusic.ru/line-up-2025",
        "workshops": "üõ† –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã: https://mintmusic.ru/workshops",
        "lectures": "üìñ –õ–µ–∫—Ü–∏–∏: https://mintmusic.ru/lectures",
        "all": "üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: https://mintmusic.ru/schedule"
    }
    await call.message.answer(events[filter_type])
    await call.answer()

@dp.message_handler(lambda message: message.text == "üó∫ –ö–∞—Ä—Ç–∞")
async def festival_map(message: types.Message):
    await message.answer("üó∫ –ö–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è: https://mintmusic.ru/map")

@dp.message_handler(lambda message: message.text == "üé§ –ê—Ä—Ç–∏—Å—Ç—ã")
async def artists(message: types.Message):
    await message.answer("üé§ –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤: https://mintmusic.ru/line-up-2025")

@dp.message_handler(lambda message: message.text == "üèï –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ")
async def accommodation(message: types.Message):
    await message.answer("üèï –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –∏ –∫–µ–º–ø–∏–Ω–≥: https://mintmusic.ru/accommodation")

@dp.message_handler(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    await message.answer("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: https://mintmusic.ru/contacts")

@dp.message_handler(lambda message: message.text == "‚úâ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º!")

async def send_reminders():
    if registered_users:
        for user_id in registered_users:
            try:
                await bot.send_message(user_id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")

scheduler.add_job(send_reminders, 'interval', hours=2)
scheduler.start()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
