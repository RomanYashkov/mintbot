import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = 'YOUR_BOT_TOKEN'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üó∫ –ö–∞—Ä—Ç–∞", "üé§ –ê—Ä—Ç–∏—Å—Ç—ã")
main_menu.add("üèï –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚úâ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule_menu = InlineKeyboardMarkup()
schedule_menu.add(InlineKeyboardButton("–ö–æ–Ω—Ü–µ—Ä—Ç—ã", callback_data='filter_concerts'))
schedule_menu.add(InlineKeyboardButton("–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã", callback_data='filter_workshops'))
schedule_menu.add(InlineKeyboardButton("–í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data='filter_all'))

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—è ¬´–î–∏–∫–∞—è –ú—è—Ç–∞¬ª üéâ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π:", reply_markup=schedule_menu)

@dp.callback_query_handler(lambda call: call.data.startswith('filter_'))
async def filter_schedule(call: types.CallbackQuery):
    filter_type = call.data.split('_')[1]
    if filter_type == 'concerts':
        await call.message.answer("üéµ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: https://mintmusic.ru/line-up-2025")
    elif filter_type == 'workshops':
        await call.message.answer("üõ† –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –±–ª–∏–∂–µ –∫ –¥–∞—Ç–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è.")
    else:
        await call.message.answer("üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: https://mintmusic.ru/line-up-2025")
    await call.answer()

@dp.message_handler(lambda message: message.text == "üó∫ –ö–∞—Ä—Ç–∞")
async def show_map(message: types.Message):
    await message.answer("üó∫ –ö–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: https://mintmusic.ru/map")

@dp.message_handler(lambda message: message.text == "üé§ –ê—Ä—Ç–∏—Å—Ç—ã")
async def show_artists(message: types.Message):
    await message.answer("üé§ –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: https://mintmusic.ru/line-up-2025")

@dp.message_handler(lambda message: message.text == "üèï –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ")
async def show_accommodation(message: types.Message):
    await message.answer(
        "üèï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–∏:\n"
        "- –ö–µ–º–ø–∏–Ω–≥ ¬´–°–µ–º–µ–π–Ω—ã–π¬ª\n"
        "- –ö–µ–º–ø–∏–Ω–≥ ¬´–ú–∞—è–∫¬ª\n"
        "- –ö–µ–º–ø–∏–Ω–≥ ¬´–ú–µ–ª–æ–º–∞–Ω¬ª\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://mintmusic.ru/accommodation"
    )

@dp.message_handler(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    await message.answer(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:\n"
        "Email: support@mintmusic.ru\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
        "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: https://mintmusic.ru/contacts"
    )

@dp.message_handler(lambda message: message.text == "‚úâ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö
async def send_reminder():
    await bot.send_message(chat_id='USER_ID', text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–Ω—è!")

scheduler.add_job(send_reminder, 'interval', hours=2)  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
scheduler.start()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
